# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
# INSTALL MYSQL ON BUILD AGENT
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

# INSTALL MYSQL
- script: |
    sudo apt-get update
    sudo apt-get install -y mysql-server
    sudo service mysql start
  displayName: 'Install and Start MySQL'

# SET UP DATABASE
- script: |
    mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS bookstoredb;"
    mysql -u root -proot -e "GRANT ALL PRIVILEGES ON bookstoredb.* TO 'root'@'localhost';"
    mysql -u root -proot -e "FLUSH PRIVILEGES;"
   
    
    #STAFF TABLE
    mysql -u root -proot -D bookstoredb -e "CREATE TABLE IF NOT EXISTS staffusers (
      staffId INT PRIMARY KEY AUTO_INCREMENT,
      firstName VARCHAR(255) NOT NULL,
      lastName VARCHAR(255) NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      password VARCHAR(255) COLLATE utf8mb4_bin NOT NULL,
      dob DATE,
      phone VARCHAR(20),
      address VARCHAR(255),
      city VARCHAR(100),
      postcode VARCHAR(20),
      country VARCHAR(100),
      role VARCHAR(255) DEFAULT 'staff' NOT NULL,
      accountStatus VARCHAR(20) DEFAULT 'active' NOT NULL 
    );"

    # USERS TABLE
    mysql -u root -proot -D bookstoredb -e "CREATE TABLE IF NOT EXISTS users (
        firstName VARCHAR(255) NOT NULL,
        lastName VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) COLLATE utf8mb4_bin NOT NULL,
        dob DATE,
        phone VARCHAR(20),
        address VARCHAR(255),
        city VARCHAR(100),
        postcode VARCHAR(20),
        country VARCHAR(100)
    );"

    # BOOKS TABLE
    mysql -u root -proot -D bookstoredb -e "CREATE TABLE books (
      BookId INT AUTO_INCREMENT PRIMARY KEY,
      title VARCHAR(255),
      author VARCHAR(255),
      price DECIMAL(10, 2),
      publishedDate DATE,
      description TEXT,
      imgUrl VARCHAR(255),
      genre VARCHAR(255),
      medium VARCHAR(255)
    );"

    # SUPPORT_TICKETS TABLE
    mysql -u root -proot -D bookstoredb -e "CREATE TABLE IF NOT EXISTS support_tickets (
        ticket_id INT AUTO_INCREMENT PRIMARY KEY,
        customer_name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL,
        subject_title VARCHAR(255) NOT NULL,
        type_of_enquiry VARCHAR(50) NOT NULL,
        issue_description TEXT NOT NULL,
        status VARCHAR(50) NOT NULL,
        date_submitted DATETIME DEFAULT CURRENT_TIMESTAMP
    );"

    # MESSAGES TABLE
    mysql -u root -proot -D bookstoredb -e "CREATE TABLE IF NOT EXISTS ticket_messages (
        message_id INT AUTO_INCREMENT PRIMARY KEY,
        ticket_id INT NOT NULL,
        sender VARCHAR(50) NOT NULL,
        message TEXT NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id) ON DELETE CASCADE
    );"

    # SHIPMENT TABLE
    mysql -u root -proot -D bookstoredb -e "CREATE TABLE IF NOT EXISTS shipments (
        ShipmentID INT AUTO_INCREMENT PRIMARY KEY,
        ShipmentDate DATE NOT NULL,
        ShipmentProgress VARCHAR(25) NOT NULL,
        ShipmentStatus VARCHAR(25) NOT NULL
    );"
  
  displayName: 'Set up MySQL Database and Create Tables'


# RUN MAVEN TO BUILD PROJECT AND RUN UNIT TESTS 
- task: Maven@3
  inputs:
    mavenPomFile: 'online-bookstore-app/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '21'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
    goals: 'verify' # triggers execution of unit tests
  displayName: 'Build and Run Tests with Maven'

# PUBLISH TEST RESULTS
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results'

# ZIP BUILD ARTIFACTS
- script: |
    zip -r $(Build.ArtifactStagingDirectory)/online-bookstore-app.zip $(Build.SourcesDirectory)/online-bookstore-app/target
  displayName: 'Zip Build Artifacts'

# PUBLISH ARTIFACT STEP
- task: PublishPipelineArtifact@1
  condition: succeeded() # publish only if build succeeds
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: drop
    publishLocation: 'pipeline'
  displayName: 'Publish Pipeline Artifact: drop'
